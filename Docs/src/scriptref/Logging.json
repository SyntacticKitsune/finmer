[
	{
		"type": "function",
		"name": "Log",
		"remarks": "Adds a message to the game window. The specified key is looked up in the string tables, and a random entry will be chosen. If the key cannot be found, a placeholder message is used instead. Color may be obtained using the Color function; see below.",
		"input": [
			{
				"name": "key",
				"type": "string",
				"desc": "string table key to look up and log"
			},
			{
				"name": "color",
				"type": "Color",
				"desc": "the color to draw with; default is white",
				"optional": true
			}
		]
	},
	{
		"type": "function",
		"name": "LogRaw",
		"remarks": "Adds a message to the game window. Unlike Log, this variant does not use string tables, and takes the final message as input directly. LogRaw(Text.GetString(key)) is functionally identical to Log(key).",
		"input": [
			{
				"name": "message",
				"type": "string",
				"desc": "the full string to add to the game window"
			},
			{
				"name": "color",
				"type": "Color",
				"desc": "the color to draw with; default is white",
				"optional": true
			}
		]
	},
	{
		"type": "function",
		"name": "Color",
		"remarks": "Returns a new color. You can pass these to Log or LogRaw to change the color of the text output. Note that you can also create colors by simply creating a table with three named keys (r, g, b).",
		"coremod": true,
		"input": [
			{
				"name": "r",
				"type": "number",
				"desc": "brightness of the red channel (0 to 255)"
			},
			{
				"name": "g",
				"type": "number",
				"desc": "brightness of the green channel (0 to 255)"
			},
			{
				"name": "b",
				"type": "number",
				"desc": "brightness of the blue channel (0 to 255)"
			}
		],
		"output": [
			{
				"type": "Color",
				"desc": "a table with three keys (r, g, b) describing the color"
			}
		]
	},
	{
		"type": "function",
		"name": "LogSplit",
		"remarks": "Adds a horizontal bar (splitter) to the game log. Useful for visually distinguishing unrelated pieces of text. The game does this by default when switching Scenes."
	},
	{
		"type": "function",
		"name": "ClearLog",
		"remarks": "Erases all text in the game log."
	},
	{
		"type": "enum",
		"name": "EPreySenseType",
		"values": [
			{
				"name": "OralVore",
				"desc": "content features oral vore"
			},
			{
				"name": "AnalVore",
				"desc": "content features anal vore"
			},
			{
				"name": "CockVore",
				"desc": "content features cock vore"
			},
			{
				"name": "Unbirth",
				"desc": "content features unbirth"
			},
			{
				"name": "Endo",
				"desc": "ending with player remaining alive or being released"
			},
			{
				"name": "EndoOrFatal",
				"desc": "ending with either endo or digestion, depending on some condition"
			},
			{
				"name": "DigestionReform",
				"desc": "ending with digestion and reformation"
			},
			{
				"name": "DigestionFatal",
				"desc": "ending with fatal digestion (and a game-over)"
			}
		]
	},
	{
		"type": "function",
		"name": "PreySense",
		"remarks": "If the user has the preysense feature enabled, displays a customizable content warning. You can add any number of warning labels, they will each be displayed.",
		"coremod": true,
		"input": [
			{
				"name": "predator",
				"type": "Creature",
				"desc": "the creature context whose name to display"
			},
			{
				"name": "label1",
				"type": "EPreySenseType",
				"desc": "the warning type to display"
			},
			{
				"name": "label2...",
				"type": "EPreySenseType",
				"desc": "another warning type to display",
				"optional": true
			}
		]
	}
]